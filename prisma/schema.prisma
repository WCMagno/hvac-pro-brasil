// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  TECHNICIAN
  CLIENT
}

enum ServiceStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum EquipmentType {
  SPLIT_SYSTEM
  CENTRAL_AC
  WINDOW_AC
  PORTABLE_AC
  CHILLER
  HEAT_PUMP
  OTHER
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  EMERGENCY
  INSPECTION
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  password      String?
  role          UserRole @default(CLIENT)
  phone         String?
  avatar        String?
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  clientProfile  Client?
  technicianProfile Technician?
  createdServices  ServiceRequest[]
  assignedServices ServiceAssignment[]
  financialTransactions FinancialTransaction[]
  pmocReports      PMOCReport[]
  receipts         Receipt[]
  maintenanceRecords MaintenanceRecord[]

  @@map("users")
}

model Client {
  id          String @id @default(cuid())
  userId      String @unique
  document    String? // CPF/CNPJ
  address     String?
  city        String?
  state       String?
  zipCode     String?
  companyName String?

  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  equipment   Equipment[]
  services    ServiceRequest[]

  @@map("clients")
}

model Technician {
  id             String @id @default(cuid())
  userId         String @unique
  document       String? // CPF
  licenseNumber  String?
  specialty      String?
  experience     Int?   // years
  available      Boolean @default(true)
  hourlyRate     Float?

  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  certifications Certification[]

  @@map("technicians")
}

model Certification {
  id           String @id @default(cuid())
  technicianId String
  name         String
  issuedDate   DateTime
  expiryDate   DateTime?
  issuingBody  String?
  certificateUrl String?

  technician   Technician @relation(fields: [technicianId], references: [id], onDelete: Cascade)

  @@map("certifications")
}

model Equipment {
  id          String       @id @default(cuid())
  clientId    String
  name        String
  type        EquipmentType
  brand       String?
  model       String?
  serialNumber String?
  installationDate DateTime?
  location    String?
  capacity    String? // BTU or tons
  lastMaintenance DateTime?
  nextMaintenance DateTime?

  client      Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)

  // Relations
  services    ServiceRequest[]
  maintenanceRecords MaintenanceRecord[]
  pmocReports PMOCReport[]

  @@map("equipment")
}

model ServiceRequest {
  id          String       @id @default(cuid())
  clientId    String
  equipmentId String?
  title       String
  description String
  priority    String       @default("MEDIUM")
  status      ServiceStatus @default(PENDING)
  requestedDate DateTime   @default(now())
  scheduledDate DateTime?
  completedDate DateTime?
  estimatedCost Float?
  finalCost    Float?
  createdBy   String

  client      Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  equipment   Equipment?   @relation(fields: [equipmentId], references: [id], onDelete: SetNull)
  user        User         @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  // Relations
  assignments ServiceAssignment[]
  maintenanceRecords MaintenanceRecord[]
  financialTransactions FinancialTransaction[]
  receipts    Receipt[]
  pmocReports PMOCReport[]

  @@map("service_requests")
}

model ServiceAssignment {
  id           String @id @default(cuid())
  serviceId    String
  technicianId String
  assignedAt   DateTime @default(now())
  acceptedAt   DateTime?
  startedAt    DateTime?
  completedAt  DateTime?
  notes        String?

  service      ServiceRequest @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  technician   User           @relation(fields: [technicianId], references: [id], onDelete: Cascade)

  @@unique([serviceId, technicianId])
  @@map("service_assignments")
}

model MaintenanceRecord {
  id           String        @id @default(cuid())
  equipmentId  String
  serviceId    String?
  technicianId String
  type         MaintenanceType
  description  String
  activities   String
  partsUsed    String?
  recommendations String?
  nextMaintenance DateTime?
  temperature  Float?
  pressure     Float?
  completedAt  DateTime      @default(now())

  equipment    Equipment      @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  service      ServiceRequest? @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  technician   User           @relation(fields: [technicianId], references: [id], onDelete: Cascade)

  @@map("maintenance_records")
}

model InventoryItem {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  category    String?
  unit        String @default("UN")
  quantity    Int    @default(0)
  minQuantity Int    @default(0)
  unitPrice   Float
  supplier    String?
  sku         String?
  active      Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  transactionItems InventoryTransactionItem[]

  @@map("inventory_items")
}

model InventoryTransaction {
  id          String @id @default(cuid())
  type        String // "IN" for incoming, "OUT" for outgoing
  description String?
  createdAt   DateTime @default(now())

  // Relations
  items       InventoryTransactionItem[]

  @@map("inventory_transactions")
}

model InventoryTransactionItem {
  id           String @id @default(cuid())
  transactionId String
  itemId       String
  quantity     Int
  unitPrice    Float

  transaction  InventoryTransaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  item         InventoryItem        @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("inventory_transaction_items")
}

model FinancialTransaction {
  id          String        @id @default(cuid())
  serviceId   String?
  userId      String
  type        String        // "INCOME" or "EXPENSE"
  description String
  amount      Float
  status      PaymentStatus @default(PENDING)
  dueDate     DateTime?
  paidDate    DateTime?
  paymentMethod String?
  notes       String?
  createdAt   DateTime      @default(now())

  service     ServiceRequest? @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("financial_transactions")
}

model PMOCReport {
  id          String @id @default(cuid())
  equipmentId String
  technicianId String
  serviceId   String?
  reportNumber String @unique
  generatedAt DateTime @default(now())
  inspectionDate DateTime
  nextInspection DateTime
  findings    String
  recommendations String
  complianceStatus String
  temperature Float?
  pressure    Float?
  gasLevel    Float?
  electricalReadings String?
  pdfUrl      String?

  equipment   Equipment      @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  technician  User           @relation(fields: [technicianId], references: [id], onDelete: Cascade)
  service     ServiceRequest? @relation(fields: [serviceId], references: [id], onDelete: SetNull)

  @@map("pmoc_reports")
}

model Receipt {
  id          String @id @default(cuid())
  serviceId   String
  userId      String
  receiptNumber String @unique
  issuedAt    DateTime @default(now())
  amount      Float
  description String
  paymentMethod String?
  status      String @default("ISSUED")
  pdfUrl      String?

  service     ServiceRequest @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("receipts")
}